/*
 * This file is generated by jOOQ.
 */
package de_2fVBKA_2fdatabase.tables;


import de_2fVBKA_2fdatabase.Keys;
import de_2fVBKA_2fdatabase.Vbka;
import de_2fVBKA_2fdatabase.tables.records.BookingRCategoryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookingRCategory extends TableImpl<BookingRCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VBKA.BOOKING_R_CATEGORY</code>
     */
    public static final BookingRCategory BOOKING_R_CATEGORY = new BookingRCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookingRCategoryRecord> getRecordType() {
        return BookingRCategoryRecord.class;
    }

    /**
     * The column <code>VBKA.BOOKING_R_CATEGORY.FK_BOOKING</code>.
     */
    public final TableField<BookingRCategoryRecord, Integer> FK_BOOKING = createField(DSL.name("FK_BOOKING"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>VBKA.BOOKING_R_CATEGORY.FK_CATEGORY</code>.
     */
    public final TableField<BookingRCategoryRecord, Integer> FK_CATEGORY = createField(DSL.name("FK_CATEGORY"), SQLDataType.INTEGER.nullable(false), this, "");

    private BookingRCategory(Name alias, Table<BookingRCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private BookingRCategory(Name alias, Table<BookingRCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VBKA.BOOKING_R_CATEGORY</code> table reference
     */
    public BookingRCategory(String alias) {
        this(DSL.name(alias), BOOKING_R_CATEGORY);
    }

    /**
     * Create an aliased <code>VBKA.BOOKING_R_CATEGORY</code> table reference
     */
    public BookingRCategory(Name alias) {
        this(alias, BOOKING_R_CATEGORY);
    }

    /**
     * Create a <code>VBKA.BOOKING_R_CATEGORY</code> table reference
     */
    public BookingRCategory() {
        this(DSL.name("BOOKING_R_CATEGORY"), null);
    }

    public <O extends Record> BookingRCategory(Table<O> child, ForeignKey<O, BookingRCategoryRecord> key) {
        super(child, key, BOOKING_R_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Vbka.VBKA;
    }

    @Override
    public UniqueKey<BookingRCategoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public List<ForeignKey<BookingRCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_6F, Keys.CONSTRAINT_6F3);
    }

    private transient Booking _booking;
    private transient Category _category;

    /**
     * Get the implicit join path to the <code>VBKA.BOOKING</code> table.
     */
    public Booking booking() {
        if (_booking == null)
            _booking = new Booking(this, Keys.CONSTRAINT_6F);

        return _booking;
    }

    /**
     * Get the implicit join path to the <code>VBKA.CATEGORY</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.CONSTRAINT_6F3);

        return _category;
    }

    @Override
    public BookingRCategory as(String alias) {
        return new BookingRCategory(DSL.name(alias), this);
    }

    @Override
    public BookingRCategory as(Name alias) {
        return new BookingRCategory(alias, this);
    }

    @Override
    public BookingRCategory as(Table<?> alias) {
        return new BookingRCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookingRCategory rename(String name) {
        return new BookingRCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookingRCategory rename(Name name) {
        return new BookingRCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookingRCategory rename(Table<?> name) {
        return new BookingRCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
