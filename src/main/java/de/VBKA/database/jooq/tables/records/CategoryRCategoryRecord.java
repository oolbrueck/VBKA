/*
 * This file is generated by jOOQ.
 */
package de.VBKA.database.jooq.tables.records;


import de.VBKA.database.jooq.tables.CategoryRCategory;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryRCategoryRecord extends UpdatableRecordImpl<CategoryRCategoryRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>VBKA.CATEGORY_R_CATEGORY.FK_PARENT_CATEGORY</code>.
     */
    public void setFkParentCategory(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>VBKA.CATEGORY_R_CATEGORY.FK_PARENT_CATEGORY</code>.
     */
    public Integer getFkParentCategory() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>VBKA.CATEGORY_R_CATEGORY.FK_CHILD_CATEGORY</code>.
     */
    public void setFkChildCategory(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>VBKA.CATEGORY_R_CATEGORY.FK_CHILD_CATEGORY</code>.
     */
    public Integer getFkChildCategory() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return CategoryRCategory.CATEGORY_R_CATEGORY.FK_PARENT_CATEGORY;
    }

    @Override
    public Field<Integer> field2() {
        return CategoryRCategory.CATEGORY_R_CATEGORY.FK_CHILD_CATEGORY;
    }

    @Override
    public Integer component1() {
        return getFkParentCategory();
    }

    @Override
    public Integer component2() {
        return getFkChildCategory();
    }

    @Override
    public Integer value1() {
        return getFkParentCategory();
    }

    @Override
    public Integer value2() {
        return getFkChildCategory();
    }

    @Override
    public CategoryRCategoryRecord value1(Integer value) {
        setFkParentCategory(value);
        return this;
    }

    @Override
    public CategoryRCategoryRecord value2(Integer value) {
        setFkChildCategory(value);
        return this;
    }

    @Override
    public CategoryRCategoryRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoryRCategoryRecord
     */
    public CategoryRCategoryRecord() {
        super(CategoryRCategory.CATEGORY_R_CATEGORY);
    }

    /**
     * Create a detached, initialised CategoryRCategoryRecord
     */
    public CategoryRCategoryRecord(Integer fkParentCategory, Integer fkChildCategory) {
        super(CategoryRCategory.CATEGORY_R_CATEGORY);

        setFkParentCategory(fkParentCategory);
        setFkChildCategory(fkChildCategory);
    }
}
