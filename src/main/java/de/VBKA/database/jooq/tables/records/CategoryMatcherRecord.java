/*
 * This file is generated by jOOQ.
 */
package de.VBKA.database.jooq.tables.records;


import de.VBKA.database.jooq.tables.CategoryMatcher;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryMatcherRecord extends UpdatableRecordImpl<CategoryMatcherRecord> implements Record2<Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>VBKA.CATEGORY_MATCHER.ID</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>VBKA.CATEGORY_MATCHER.ID</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>VBKA.CATEGORY_MATCHER.MATCHING_WORD</code>.
     */
    public void setMatchingWord(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>VBKA.CATEGORY_MATCHER.MATCHING_WORD</code>.
     */
    public String getMatchingWord() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return CategoryMatcher.CATEGORY_MATCHER.ID;
    }

    @Override
    public Field<String> field2() {
        return CategoryMatcher.CATEGORY_MATCHER.MATCHING_WORD;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getMatchingWord();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getMatchingWord();
    }

    @Override
    public CategoryMatcherRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoryMatcherRecord value2(String value) {
        setMatchingWord(value);
        return this;
    }

    @Override
    public CategoryMatcherRecord values(Long value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoryMatcherRecord
     */
    public CategoryMatcherRecord() {
        super(CategoryMatcher.CATEGORY_MATCHER);
    }

    /**
     * Create a detached, initialised CategoryMatcherRecord
     */
    public CategoryMatcherRecord(Long id, String matchingWord) {
        super(CategoryMatcher.CATEGORY_MATCHER);

        setId(id);
        setMatchingWord(matchingWord);
    }
}
