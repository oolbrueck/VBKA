/*
 * This file is generated by jOOQ.
 */
package de.VBKA.database.jooq.tables;


import de.VBKA.database.jooq.Keys;
import de.VBKA.database.jooq.Vbka;
import de.VBKA.database.jooq.tables.records.CategoryMatcherRCategoryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryMatcherRCategory extends TableImpl<CategoryMatcherRCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VBKA.CATEGORY_MATCHER_R_CATEGORY</code>
     */
    public static final CategoryMatcherRCategory CATEGORY_MATCHER_R_CATEGORY = new CategoryMatcherRCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryMatcherRCategoryRecord> getRecordType() {
        return CategoryMatcherRCategoryRecord.class;
    }

    /**
     * The column <code>VBKA.CATEGORY_MATCHER_R_CATEGORY.FK_CATEGORY</code>.
     */
    public final TableField<CategoryMatcherRCategoryRecord, Integer> FK_CATEGORY = createField(DSL.name("FK_CATEGORY"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>VBKA.CATEGORY_MATCHER_R_CATEGORY.FK_CATEGORY_MATCHER</code>.
     */
    public final TableField<CategoryMatcherRCategoryRecord, String> FK_CATEGORY_MATCHER = createField(DSL.name("FK_CATEGORY_MATCHER"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private CategoryMatcherRCategory(Name alias, Table<CategoryMatcherRCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryMatcherRCategory(Name alias, Table<CategoryMatcherRCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VBKA.CATEGORY_MATCHER_R_CATEGORY</code> table
     * reference
     */
    public CategoryMatcherRCategory(String alias) {
        this(DSL.name(alias), CATEGORY_MATCHER_R_CATEGORY);
    }

    /**
     * Create an aliased <code>VBKA.CATEGORY_MATCHER_R_CATEGORY</code> table
     * reference
     */
    public CategoryMatcherRCategory(Name alias) {
        this(alias, CATEGORY_MATCHER_R_CATEGORY);
    }

    /**
     * Create a <code>VBKA.CATEGORY_MATCHER_R_CATEGORY</code> table reference
     */
    public CategoryMatcherRCategory() {
        this(DSL.name("CATEGORY_MATCHER_R_CATEGORY"), null);
    }

    public <O extends Record> CategoryMatcherRCategory(Table<O> child, ForeignKey<O, CategoryMatcherRCategoryRecord> key) {
        super(child, key, CATEGORY_MATCHER_R_CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Vbka.VBKA;
    }

    @Override
    public UniqueKey<CategoryMatcherRCategoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public List<ForeignKey<CategoryMatcherRCategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_DF, Keys.CONSTRAINT_DF8);
    }

    private transient Category _category;
    private transient CategoryMatcher _categoryMatcher;

    /**
     * Get the implicit join path to the <code>VBKA.CATEGORY</code> table.
     */
    public Category category() {
        if (_category == null)
            _category = new Category(this, Keys.CONSTRAINT_DF);

        return _category;
    }

    /**
     * Get the implicit join path to the <code>VBKA.CATEGORY_MATCHER</code>
     * table.
     */
    public CategoryMatcher categoryMatcher() {
        if (_categoryMatcher == null)
            _categoryMatcher = new CategoryMatcher(this, Keys.CONSTRAINT_DF8);

        return _categoryMatcher;
    }

    @Override
    public CategoryMatcherRCategory as(String alias) {
        return new CategoryMatcherRCategory(DSL.name(alias), this);
    }

    @Override
    public CategoryMatcherRCategory as(Name alias) {
        return new CategoryMatcherRCategory(alias, this);
    }

    @Override
    public CategoryMatcherRCategory as(Table<?> alias) {
        return new CategoryMatcherRCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcherRCategory rename(String name) {
        return new CategoryMatcherRCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcherRCategory rename(Name name) {
        return new CategoryMatcherRCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcherRCategory rename(Table<?> name) {
        return new CategoryMatcherRCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
