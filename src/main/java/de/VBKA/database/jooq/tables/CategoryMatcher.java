/*
 * This file is generated by jOOQ.
 */
package de.VBKA.database.jooq.tables;


import de.VBKA.database.jooq.Keys;
import de.VBKA.database.jooq.Vbka;
import de.VBKA.database.jooq.tables.records.CategoryMatcherRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function1;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoryMatcher extends TableImpl<CategoryMatcherRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>VBKA.CATEGORY_MATCHER</code>
     */
    public static final CategoryMatcher CATEGORY_MATCHER = new CategoryMatcher();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoryMatcherRecord> getRecordType() {
        return CategoryMatcherRecord.class;
    }

    /**
     * The column <code>VBKA.CATEGORY_MATCHER.MATCHING_WORD</code>.
     */
    public final TableField<CategoryMatcherRecord, String> MATCHING_WORD = createField(DSL.name("MATCHING_WORD"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private CategoryMatcher(Name alias, Table<CategoryMatcherRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoryMatcher(Name alias, Table<CategoryMatcherRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>VBKA.CATEGORY_MATCHER</code> table reference
     */
    public CategoryMatcher(String alias) {
        this(DSL.name(alias), CATEGORY_MATCHER);
    }

    /**
     * Create an aliased <code>VBKA.CATEGORY_MATCHER</code> table reference
     */
    public CategoryMatcher(Name alias) {
        this(alias, CATEGORY_MATCHER);
    }

    /**
     * Create a <code>VBKA.CATEGORY_MATCHER</code> table reference
     */
    public CategoryMatcher() {
        this(DSL.name("CATEGORY_MATCHER"), null);
    }

    public <O extends Record> CategoryMatcher(Table<O> child, ForeignKey<O, CategoryMatcherRecord> key) {
        super(child, key, CATEGORY_MATCHER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Vbka.VBKA;
    }

    @Override
    public UniqueKey<CategoryMatcherRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_99;
    }

    @Override
    public CategoryMatcher as(String alias) {
        return new CategoryMatcher(DSL.name(alias), this);
    }

    @Override
    public CategoryMatcher as(Name alias) {
        return new CategoryMatcher(alias, this);
    }

    @Override
    public CategoryMatcher as(Table<?> alias) {
        return new CategoryMatcher(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcher rename(String name) {
        return new CategoryMatcher(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcher rename(Name name) {
        return new CategoryMatcher(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoryMatcher rename(Table<?> name) {
        return new CategoryMatcher(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function1<? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function1<? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
